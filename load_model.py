import torch
from transformers import DistilBertTokenizer, DistilBertModel
from torch import cuda
from torch.utils.data import Dataset, DataLoader, RandomSampler, SequentialSampler
import pandas as pd


device = 'cuda' if cuda.is_available() else 'cpu'
model_name = 'pytorch_distilbert_sc.bin'


tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased', truncation=True, do_lower_case=True)
tokenizer.add_tokens(['ModifierDefinition', 'ModifierInvocation', 'SimpleName', 'FunctionDefinition', 'stateMutability', 'ReturnParas', 'Var Declare', 'StorageLocation', 'ExpressionState', 'SimpleType', 'IfStat', 'WhileState', 'ForState', 'DoWhileState', 'ContinueState', 'BreakState', 'ThrowState', 'ReturnState', 'EmitState', 'FunctionCall', 'SimpleTypeExpression', 'BinaryOperation', 'BooleanLiteral'])


# Creating the customized model, by adding a drop out and a dense layer on top of distil bert to get the final output for the model.
class DistilBERTClass(torch.nn.Module):
    def __init__(self):
        super(DistilBERTClass, self).__init__()
        self.l1 = DistilBertModel.from_pretrained("distilbert-base-uncased")
        self.l1.resize_token_embeddings(len(tokenizer)) #分词器resize
        self.pre_classifier = torch.nn.Linear(768, 768)  #全连接层
        self.dropout = torch.nn.Dropout(0.1)
        self.classifier = torch.nn.Linear(768, 20) 

    def forward(self, input_ids, attention_mask, token_type_ids):
        output_1 = self.l1(input_ids=input_ids, attention_mask=attention_mask)
        hidden_state = output_1[0]
        pooler = hidden_state[:, 0]
        pooler = self.pre_classifier(pooler)
        pooler = torch.nn.Tanh()(pooler)
        pooler = self.dropout(pooler)
        output = self.classifier(pooler)
        return output


LEARNING_RATE = 1e-05
model = DistilBERTClass()
model.to(device)
optimizer = torch.optim.Adam(params=model.parameters(), lr=LEARNING_RATE)


# load
output_model = r'../BERTmodel/fine_tuned_distillmodel.pth'
checkpoint = torch.load(output_model, map_location='cpu')
model.load_state_dict(checkpoint['model_state_dict'])
optimizer.load_state_dict(checkpoint['optimizer_state_dict'])


class MultiLabelDataset(Dataset):
    def __init__(self, dataframe, tokenizer, max_len):
        self.tokenizer = tokenizer
        self.data = dataframe
        self.text = dataframe.text
        self.targets = self.data.labels
        self.max_len = max_len

    def __len__(self):
        return len(self.text)

    def __getitem__(self, index):
        text = str(self.text[index])
        text = " ".join(text.split())

        inputs = self.tokenizer.encode_plus(
            text,
            None,
            add_special_tokens=True,
            max_length=self.max_len,
            pad_to_max_length=True,
            return_token_type_ids=True
        )
        ids = inputs['input_ids']
        mask = inputs['attention_mask']
        token_type_ids = inputs["token_type_ids"]


        return {
            'ids': torch.tensor(ids, dtype=torch.long),
            'mask': torch.tensor(mask, dtype=torch.long),
            'token_type_ids': torch.tensor(token_type_ids, dtype=torch.long),
            'targets': torch.tensor(self.targets[index], dtype=torch.float)
        }


MAX_LEN = 128
context = 'contract ( children ( child0 ( baseContracts ( [] ) kind ( contract ) name ( two ) subNodes ( child0 ( initialValue ( None ) type ( StateVariableDeclaration ) variables ( child0 ( expression ( None ) isDeclaredConst ( False ) isIndexed ( False ) isStateVar ( True ) name ( deployer ) type ( VariableDeclaration ) nametypevisibility ( public )  )  )  ) child1 ( statements ( child0 ( left ( name ( deployer ) type ( Identifier )  ) operatorright ( nametypememberName ( sender ) type ( MemberAccess )  ) typetype ( ExpressionStatement )  )  ) typeisConstructor ( False ) isFallback ( False ) isReceive ( False ) modifiers ( [] ) name ( two ) parameterstypereturnParameters ( [] ) stateMutability ( None ) type ( FunctionDefinition ) visibility ( default )  ) child2 ( statements ( child0 ( arguments ( child0 ( nametypememberName ( balance ) type ( MemberAccess )  )  ) expression ( nametypememberName ( send ) type ( MemberAccess )  ) namestypetype ( ExpressionStatement )  )  ) typeisConstructor ( False ) isFallback ( False ) isReceive ( False ) modifiers ( [] ) name ( pay ) parameterstypereturnParameters ( [] ) stateMutability ( None ) type ( FunctionDefinition ) visibility ( default )  ) child3 ( statements ( child0 ( argumentsexpression ( name ( pay ) type ( Identifier )  ) namestypetype ( ExpressionStatement )  )  ) typeisConstructor ( False ) isFallback ( False ) isReceive ( False ) modifiers ( [] ) name ( function(){pay();} ) parameterstypereturnParameters ( [] ) stateMutability ( None ) type ( FunctionDefinition ) visibility ( default )  )  ) type ( ContractDefinition )  )  ) type ) '
test_data = {'text': context, 'labels': [0 for _ in range(20)]}
test_data = pd.DataFrame.from_dict(test_data)
testing_set = MultiLabelDataset(test_data, tokenizer, MAX_LEN)
test_params = {'batch_size': 1,
                'shuffle': True,
                'num_workers': 0}
testing_loader = DataLoader(testing_set, **test_params)


def validation(testing_loader):
    model.eval()
    fin_targets=[]
    fin_outputs=[]
    with torch.no_grad():
        for _, data in enumerate(testing_loader, 0):
            ids = data['ids'].to(device, dtype=torch.long)
            mask = data['mask'].to(device, dtype=torch.long)
            token_type_ids = data['token_type_ids'].to(device, dtype=torch.long)
            targets = data['targets'].to(device, dtype=torch.float)
            outputs = model(ids, mask, token_type_ids)
            fin_targets.extend(targets.cpu().detach().numpy().tolist())
            fin_outputs.extend(torch.sigmoid(outputs).cpu().detach().numpy().tolist())
    return fin_outputs, fin_targets


outputs, _ = validation(testing_loader)
print(outputs)


